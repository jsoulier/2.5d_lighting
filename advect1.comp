#version 450

#include "config.hpp"
#include "shader.glsl"

layout(local_size_x = THREADS_3D, local_size_y = THREADS_3D, local_size_z = THREADS_3D) in;
layout(set = 0, binding = 0) uniform sampler3D inVelocityX;
layout(set = 0, binding = 1) uniform sampler3D inVelocityY;
layout(set = 0, binding = 2) uniform sampler3D inVelocityZ;
layout(set = 1, binding = 0, rgba32f) uniform writeonly image3D outVelocity;
layout(set = 2, binding = 0) uniform uniformVelocity
{
    uint velocity;
};
layout(set = 2, binding = 1) uniform uniformDeltaTime
{
    float deltaTime;
};

void main()
{
    ivec3 size = textureSize(inVelocityX, 0);
    ivec3 id = ivec3(gl_GlobalInvocationID);
    if (any(greaterThanEqual(id, size - 1)) || any(lessThanEqual(id, ivec3(0))))
    {
        return;
    }
    if (velocity == 0)
    {
        ADVECT(id, outVelocity, inVelocityX, inVelocityX, inVelocityY, inVelocityZ, deltaTime, size);
    }
    else if (velocity == 1)
    {
        ADVECT(id, outVelocity, inVelocityY, inVelocityX, inVelocityY, inVelocityZ, deltaTime, size);
    }
    else if (velocity == 2)
    {
        ADVECT(id, outVelocity, inVelocityZ, inVelocityX, inVelocityY, inVelocityZ, deltaTime, size);
    }
}