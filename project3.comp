#version 450

#include "config.hpp"
#include "shader.glsl"

layout(local_size_x = THREADS_3D, local_size_y = THREADS_3D, local_size_z = THREADS_3D) in;
layout(set = 0, binding = 0, r32f) uniform readonly image3D inPressure;
layout(set = 0, binding = 1, r32f) uniform readonly image3D inVelocityX;
layout(set = 0, binding = 2, r32f) uniform readonly image3D inVelocityY;
layout(set = 0, binding = 3, r32f) uniform readonly image3D inVelocityZ;
layout(set = 1, binding = 0, r32f) uniform writeonly image3D outVelocityX;
layout(set = 1, binding = 1, r32f) uniform writeonly image3D outVelocityY;
layout(set = 1, binding = 2, r32f) uniform writeonly image3D outVelocityZ;

void main()
{
    ivec3 size = imageSize(inPressure);
    ivec3 id = ivec3(gl_GlobalInvocationID);
    if (any(greaterThanEqual(id, size - 1)) || any(lessThanEqual(id, ivec3(0))))
    {
        return;
    }
    float value = 0.0f;
    value += imageLoad(inPressure, id + ivec3(1, 0, 0)).x;
    value -= imageLoad(inPressure, id + ivec3(-1, 0, 0)).x;
    value *= 0.5f;
    value *= size.x;
    value += imageLoad(inVelocityX, id).x;
    imageStore(outVelocityX, id, vec4(value));
    value = 0.0f;
    value += imageLoad(inPressure, id + ivec3(0, 1, 0)).x;
    value -= imageLoad(inPressure, id + ivec3(0, -1, 0)).x;
    value *= 0.5f;
    value *= size.x;
    value += imageLoad(inVelocityY, id).x;
    imageStore(outVelocityY, id, vec4(value));
    value = 0.0f;
    value += imageLoad(inPressure, id + ivec3(0, 0, 1)).x;
    value -= imageLoad(inPressure, id + ivec3(0, 0, -1)).x;
    value *= 0.5f;
    value *= size.x;
    value += imageLoad(inVelocityZ, id).x;
    imageStore(outVelocityZ, id, vec4(value));
}