#version 450

#include "config.hpp"
#include "shader.glsl"

layout(local_size_x = THREADS_3D, local_size_y = THREADS_3D, local_size_z = THREADS_3D) in;
layout(set = 0, binding = 0, r32f) uniform readonly image3D inVelocityX;
layout(set = 0, binding = 1, r32f) uniform readonly image3D inVelocityY;
layout(set = 0, binding = 2, r32f) uniform readonly image3D inVelocityZ;
layout(set = 1, binding = 0, r32f) uniform writeonly image3D outVelocity;
layout(set = 2, binding = 0) uniform uniformVelocity
{
    uint velocity;
};
layout(set = 2, binding = 1) uniform uniformDeltaTime
{
    float deltaTime;
};

#define SOLVE(inVelocity) \
    do \
    { \
        float value = \
            s0 * (t0 * (u0 * imageLoad(inVelocity, ivec3(i0i, j0i, k0i)).x + \
                        u1 * imageLoad(inVelocity, ivec3(i0i, j0i, k1i)).x) + \
                 (t1 * (u0 * imageLoad(inVelocity, ivec3(i0i, j1i, k0i)).x + \
                        u1 * imageLoad(inVelocity, ivec3(i0i, j1i, k1i)).x))) + \
            s1 * (t0 * (u0 * imageLoad(inVelocity, ivec3(i1i, j0i, k0i)).x + \
                        u1 * imageLoad(inVelocity, ivec3(i1i, j0i, k1i)).x) + \
                 (t1 * (u0 * imageLoad(inVelocity, ivec3(i1i, j1i, k0i)).x + \
                        u1 * imageLoad(inVelocity, ivec3(i1i, j1i, k1i)).x))); \
        imageStore(outVelocity, id, vec4(value)); \
    } \
    while (false) \

void main()
{
    ivec3 size = imageSize(inVelocityX);
    ivec3 id = ivec3(gl_GlobalInvocationID);
    if (any(greaterThanEqual(id, size - 1)) || any(lessThanEqual(id, ivec3(0))))
    {
        return;
    }
    /* TODO: copied from Mike Ash. refactor */
    float N = size.x;
    vec3 dt = deltaTime * (size - 2);
    float tmp1 = dt.x * imageLoad(inVelocityX, id).x;
    float tmp2 = dt.y * imageLoad(inVelocityY, id).x;
    float tmp3 = dt.z * imageLoad(inVelocityZ, id).x;
    float x = id.x - tmp1;
    float y = id.y - tmp2;
    float z = id.z - tmp3;
    if (x < 0.5f)
    {
        x = 0.5f;
    }
    if (x > N + 0.5f)
    {
        x = N + 0.5f;
    }
    float i0 = floor(x);
    float i1 = i0 + 1.0f;
    if (y < 0.5f)
    {
        y = 0.5f;
    }
    if (y > N + 0.5f)
    {
        y = N + 0.5f;
    }
    float j0 = floor(y);
    float j1 = j0 + 1.0f;
    if (z < 0.5f)
    {
        z = 0.5f;
    }
    if (z > N + 0.5f)
    {
        z = N + 0.5f;
    }
    float k0 = floor(z);
    float k1 = k0 + 1.0f;
    float s1 = x - i0;
    float s0 = 1.0f - s1;
    float t1 = y - j0;
    float t0 = 1.0f - t1;
    float u1 = z - k0;
    float u0 = 1.0f - u1;
    int i0i = int(i0);
    int i1i = int(i1);
    int j0i = int(j0);
    int j1i = int(j1);
    int k0i = int(k0);
    int k1i = int(k1);
    if (velocity == 0)
    {
        SOLVE(inVelocityX);
    }
    else if (velocity == 1)
    {
        SOLVE(inVelocityY);
    }
    else if (velocity == 2)
    {
        SOLVE(inVelocityZ);
    }
}