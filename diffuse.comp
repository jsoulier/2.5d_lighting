#version 450

#include "config.hpp"
#include "shader.glsl"

layout(local_size_x = THREADS_3D, local_size_y = THREADS_3D, local_size_z = THREADS_3D) in;
layout(set = 0, binding = 0, r32f) uniform readonly image3D inDiffuse;
layout(set = 1, binding = 0, r32f) uniform writeonly image3D outDiffuse;
layout(set = 2, binding = 0) uniform uniformParams
{
    uint dt;
};

void main()
{
    ivec3 size = imageSize(inDiffuse);
    ivec3 id = ivec3(gl_GlobalInvocationID);
    if (any(greaterThanEqual(id, size - 1)) || any(lessThanEqual(id, ivec3(0))))
    {
        return;
    }
    /* TODO: */
    float value = imageLoad(inDiffuse, id).x;
    imageStore(outDiffuse, id, vec4(value));
}