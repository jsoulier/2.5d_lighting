#pragma clang diagnostic ignored "-Wmissing-prototypes"
#pragma clang diagnostic ignored "-Wmissing-braces"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

template<typename T, size_t Num>
struct spvUnsafeArray
{
    T elements[Num ? Num : 1];
    
    thread T& operator [] (size_t pos) thread
    {
        return elements[pos];
    }
    constexpr const thread T& operator [] (size_t pos) const thread
    {
        return elements[pos];
    }
    
    device T& operator [] (size_t pos) device
    {
        return elements[pos];
    }
    constexpr const device T& operator [] (size_t pos) const device
    {
        return elements[pos];
    }
    
    constexpr const constant T& operator [] (size_t pos) const constant
    {
        return elements[pos];
    }
    
    threadgroup T& operator [] (size_t pos) threadgroup
    {
        return elements[pos];
    }
    constexpr const threadgroup T& operator [] (size_t pos) const threadgroup
    {
        return elements[pos];
    }
};

struct uniformDeltaTime
{
    float deltaTime;
};

struct uniformDiffusion
{
    float diffusion;
};

constant uint3 gl_WorkGroupSize [[maybe_unused]] = uint3(8u);

constant spvUnsafeArray<int3, 6> _181 = spvUnsafeArray<int3, 6>({ int3(1, 0, 0), int3(-1, 0, 0), int3(0, 1, 0), int3(0, -1, 0), int3(0, 0, 1), int3(0, 0, -1) });

kernel void main0(constant uniformDeltaTime& _94 [[buffer(0)]], constant uniformDiffusion& _100 [[buffer(1)]], texture3d<float> inImage1 [[texture(0)]], texture3d<float> inImage2 [[texture(1)]], texture3d<float, access::write> outImage [[texture(2)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    int3 size = int3(inImage1.get_width(), inImage1.get_height(), inImage1.get_depth());
    int3 id = int3(gl_GlobalInvocationID);
    bool _32 = id.x >= (size.x - 1);
    bool _43;
    if (!_32)
    {
        _43 = id.y >= (size.y - 1);
    }
    else
    {
        _43 = _32;
    }
    bool _54;
    if (!_43)
    {
        _54 = id.z >= (size.z - 1);
    }
    else
    {
        _54 = _43;
    }
    if (_54)
    {
        outImage.write(float4(0.0), uint3(id));
        return;
    }
    bool _67 = id.x <= 0;
    bool _74;
    if (!_67)
    {
        _74 = id.y <= 0;
    }
    else
    {
        _74 = _67;
    }
    bool _81;
    if (!_74)
    {
        _81 = id.z <= 0;
    }
    else
    {
        _81 = _74;
    }
    if (_81)
    {
        outImage.write(float4(0.0), uint3(id));
        return;
    }
    int N = size.x;
    float a = ((_94.deltaTime * _100.diffusion) * float(N - 2)) * float(N - 2);
    float c = 1.0 + (6.0 * a);
    do
    {
        outImage.write(float4((inImage1.read(uint3(id)).x + (a * (((((inImage2.read(uint3((id + int3(1, 0, 0)))).x + inImage2.read(uint3((id + int3(-1, 0, 0)))).x) + inImage2.read(uint3((id + int3(0, 1, 0)))).x) + inImage2.read(uint3((id + int3(0, -1, 0)))).x) + inImage2.read(uint3((id + int3(0, 0, 1)))).x) + inImage2.read(uint3((id + int3(0, 0, -1)))).x))) / c), uint3(id));
    } while (false);
}

