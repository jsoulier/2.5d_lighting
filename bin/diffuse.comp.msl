#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

constant uint3 gl_WorkGroupSize [[maybe_unused]] = uint3(8u);

struct uniformParams
{
    uint dt;
};

kernel void main0(texture3d<float> inDiffuse [[texture(0)]], texture3d<float, access::write> outDiffuse [[texture(1)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    int3 size = int3(inDiffuse.get_width(), inDiffuse.get_height(), inDiffuse.get_depth());
    int3 id = int3(gl_GlobalInvocationID);
    bool _31 = any(id >= (size - int3(1)));
    bool _40;
    if (!_31)
    {
        _40 = any(id <= int3(0));
    }
    else
    {
        _40 = _31;
    }
    if (_40)
    {
        return;
    }
    float value = inDiffuse.read(uint3(id)).x;
    outDiffuse.write(float4(value), uint3(id));
}

