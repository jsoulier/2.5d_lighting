#pragma clang diagnostic ignored "-Wmissing-prototypes"
#pragma clang diagnostic ignored "-Wmissing-braces"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

template<typename T, size_t Num>
struct spvUnsafeArray
{
    T elements[Num ? Num : 1];
    
    thread T& operator [] (size_t pos) thread
    {
        return elements[pos];
    }
    constexpr const thread T& operator [] (size_t pos) const thread
    {
        return elements[pos];
    }
    
    device T& operator [] (size_t pos) device
    {
        return elements[pos];
    }
    constexpr const device T& operator [] (size_t pos) const device
    {
        return elements[pos];
    }
    
    constexpr const constant T& operator [] (size_t pos) const constant
    {
        return elements[pos];
    }
    
    threadgroup T& operator [] (size_t pos) threadgroup
    {
        return elements[pos];
    }
    constexpr const threadgroup T& operator [] (size_t pos) const threadgroup
    {
        return elements[pos];
    }
};

struct uniformDeltaTime
{
    float deltaTime;
};

struct uniformDiffusion
{
    float diffusion;
};

constant uint3 gl_WorkGroupSize [[maybe_unused]] = uint3(8u);

constant spvUnsafeArray<int3, 6> _103 = spvUnsafeArray<int3, 6>({ int3(1, 0, 0), int3(-1, 0, 0), int3(0, 1, 0), int3(0, -1, 0), int3(0, 0, 1), int3(0, 0, -1) });

kernel void main0(constant uniformDeltaTime& _48 [[buffer(0)]], constant uniformDiffusion& _54 [[buffer(1)]], texture3d<float> inImage [[texture(0)]], texture3d<float, access::write> outImage [[texture(1)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    int3 size = int3(inImage.get_width(), inImage.get_height(), inImage.get_depth());
    int3 id = int3(gl_GlobalInvocationID);
    bool _31 = any(id >= (size - int3(1)));
    bool _40;
    if (!_31)
    {
        _40 = any(id <= int3(0));
    }
    else
    {
        _40 = _31;
    }
    if (_40)
    {
        return;
    }
    float a = ((_48.deltaTime * _54.diffusion) * float(size.x - 2)) * float(size.x - 2);
    float c = 1.0 + (6.0 * a);
    do
    {
        float value = 0.0;
        for (int i = 0; i < 6; i++)
        {
            int3 neighbor = id + _103[i];
            value += inImage.read(uint3(neighbor)).x;
        }
        value *= a;
        value += inImage.read(uint3(id)).x;
        value /= c;
        value = fast::min(value, 1.0);
        outImage.write(float4(value), uint3(id));
    } while (false);
}

