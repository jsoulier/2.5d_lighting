#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct uniformDeltaTime
{
    float deltaTime;
};

struct uniformDiffusion
{
    float diffusion;
};

constant uint3 gl_WorkGroupSize [[maybe_unused]] = uint3(8u);

kernel void main0(constant uniformDeltaTime& _53 [[buffer(0)]], constant uniformDiffusion& _59 [[buffer(1)]], texture3d<float> inImage [[texture(0)]], texture3d<float, access::write> outImage [[texture(1)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    int3 size = int3(inImage.get_width(), inImage.get_height(), inImage.get_depth());
    int3 id = int3(gl_GlobalInvocationID);
    bool _31 = any(id >= (size - int3(1)));
    bool _40;
    if (!_31)
    {
        _40 = any(id <= int3(0));
    }
    else
    {
        _40 = _31;
    }
    if (_40)
    {
        return;
    }
    int N = size.x;
    float a = ((_53.deltaTime * _59.diffusion) * float(N - 2)) * float(N - 2);
    float c = 1.0 + (6.0 * a);
    do
    {
        outImage.write(float4((inImage.read(uint3(id)).x + (a * (((((inImage.read(uint3((id + int3(1, 0, 0)))).x + inImage.read(uint3((id + int3(-1, 0, 0)))).x) + inImage.read(uint3((id + int3(0, 1, 0)))).x) + inImage.read(uint3((id + int3(0, -1, 0)))).x) + inImage.read(uint3((id + int3(0, 0, 1)))).x) + inImage.read(uint3((id + int3(0, 0, -1)))).x))) / c), uint3(id));
    } while (false);
}

