#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

constant uint3 gl_WorkGroupSize [[maybe_unused]] = uint3(8u);

kernel void main0(texture3d<float> inVelocityX [[texture(0)]], texture3d<float, access::write> outPressure [[texture(3)]], texture3d<float, access::write> outDivergence [[texture(4)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    int3 size = int3(inVelocityX.get_width(), inVelocityX.get_height(), inVelocityX.get_depth());
    int3 id = int3(gl_GlobalInvocationID);
    bool _31 = any(id >= (size - int3(1)));
    bool _40;
    if (!_31)
    {
        _40 = any(id <= int3(0));
    }
    else
    {
        _40 = _31;
    }
    if (_40)
    {
        return;
    }
    uint N = uint(size.x);
    outDivergence.write(float4(((-0.5) * (((((inVelocityX.read(uint3((id + int3(1, 0, 0)))).x - inVelocityX.read(uint3((id + int3(-1, 0, 0)))).x) + inVelocityX.read(uint3((id + int3(0, 1, 0)))).x) - inVelocityX.read(uint3((id + int3(0, -1, 0)))).x) + inVelocityX.read(uint3((id + int3(0, 0, 1)))).x) - inVelocityX.read(uint3((id + int3(0, 0, -1)))).x)) / float(N)), uint3(id));
    outPressure.write(float4(0.0), uint3(id));
}

