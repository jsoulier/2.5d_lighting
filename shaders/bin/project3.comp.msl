#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

constant uint3 gl_WorkGroupSize [[maybe_unused]] = uint3(8u);

kernel void main0(texture3d<float> inPressure [[texture(0)]], texture3d<float> inVelocityX [[texture(1)]], texture3d<float> inVelocityY [[texture(2)]], texture3d<float> inVelocityZ [[texture(3)]], texture3d<float, access::write> outVelocityX [[texture(4)]], texture3d<float, access::write> outVelocityY [[texture(5)]], texture3d<float, access::write> outVelocityZ [[texture(6)]], sampler inPressureSmplr [[sampler(0)]], sampler inVelocityXSmplr [[sampler(1)]], sampler inVelocityYSmplr [[sampler(2)]], sampler inVelocityZSmplr [[sampler(3)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    int3 size = int3(inPressure.get_width(), inPressure.get_height(), inPressure.get_depth());
    int3 id = int3(gl_GlobalInvocationID);
    bool _34 = any(id >= (size - int3(1)));
    bool _42;
    if (!_34)
    {
        _42 = any(id <= int3(0));
    }
    else
    {
        _42 = _34;
    }
    if (_42)
    {
        return;
    }
    uint N = uint(size.x);
    outVelocityX.write(float4(inVelocityX.read(uint3(id), 0).x) - (((inPressure.read(uint3((id + int3(1, 0, 0))), 0) - inPressure.read(uint3((id + int3(-1, 0, 0))), 0)) * 0.5) / float4(float(N))), uint3(id));
    outVelocityY.write(float4(inVelocityY.read(uint3(id), 0).x) - (((inPressure.read(uint3((id + int3(0, 1, 0))), 0) - inPressure.read(uint3((id + int3(0, -1, 0))), 0)) * 0.5) / float4(float(N))), uint3(id));
    outVelocityZ.write(float4(inVelocityZ.read(uint3(id), 0).x) - (((inPressure.read(uint3((id + int3(0, 0, 1))), 0) - inPressure.read(uint3((id + int3(0, 0, -1))), 0)) * 0.5) / float4(float(N))), uint3(id));
}

