#version 450

#include "config.hpp"

layout(local_size_x = THREADS_3D, local_size_y = THREADS_3D, local_size_z = THREADS_3D) in;
layout(set = 0, binding = 0) uniform sampler3D inPressure;
layout(set = 0, binding = 1) uniform sampler3D inVelocityX;
layout(set = 0, binding = 2) uniform sampler3D inVelocityY;
layout(set = 0, binding = 3) uniform sampler3D inVelocityZ;
layout(set = 1, binding = 0, rgba32f) uniform writeonly image3D outVelocityX;
layout(set = 1, binding = 1, rgba32f) uniform writeonly image3D outVelocityY;
layout(set = 1, binding = 2, rgba32f) uniform writeonly image3D outVelocityZ;

void main()
{
    ivec3 size = textureSize(inPressure, 0);
    ivec3 id = ivec3(gl_GlobalInvocationID);
    if (any(greaterThanEqual(id, size - 1)) || any(lessThanEqual(id, ivec3(0))))
    {
        return;
    }
    uint N = size.x;
    imageStore(outVelocityX, id, vec4(
        texelFetch(inVelocityX, id, 0).x - 0.5f * (
            texelFetch(inPressure, id + ivec3( 1, 0, 0 ), 0) -
            texelFetch(inPressure, id + ivec3(-1, 0, 0 ), 0)) / N));
    imageStore(outVelocityY, id, vec4(
        texelFetch(inVelocityY, id, 0).x - 0.5f * (
            texelFetch(inPressure, id + ivec3( 0, 1, 0 ), 0) -
            texelFetch(inPressure, id + ivec3( 0,-1, 0 ), 0)) / N));
    imageStore(outVelocityZ, id, vec4(
        texelFetch(inVelocityZ, id, 0).x - 0.5f * (
            texelFetch(inPressure, id + ivec3( 0, 0, 1 ), 0) -
            texelFetch(inPressure, id + ivec3( 0, 0,-1 ), 0)) / N));
}