#version 450

#include "config.hpp"
#include "shader.glsl"

layout(local_size_x = THREADS, local_size_y = THREADS, local_size_z = THREADS) in;
layout(set = 0, binding = 0) uniform sampler3D inImage;
layout(set = 1, binding = 0, rgba32f) uniform writeonly image3D outImage;
layout(set = 2, binding = 0) uniform uniformDeltaTime
{
    float deltaTime;
};
layout(set = 2, binding = 1) uniform uniformDiffusion
{
    float diffusion;
};

void main()
{
    ivec3 size = textureSize(inImage, 0);
    ivec3 id = ivec3(gl_GlobalInvocationID);
    if (any(greaterThanEqual(id, size - 1)) || any(lessThanEqual(id, ivec3(0))))
    {
        return;
    }
    int N = size.x;
    float a = deltaTime * diffusion * (N - 2) * (N - 2);
    float c = 1 + 6 * a;
    LIN_SOLVE(id, inImage, outImage, a, c);
}